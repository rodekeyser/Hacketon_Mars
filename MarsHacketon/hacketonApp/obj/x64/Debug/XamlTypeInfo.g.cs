//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace hacketonApp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::hacketonApp.hacketonApp_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace hacketonApp.hacketonApp_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[68];
            _typeNameTable[0] = "hacketonApp.View.Temperature";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "LiveCharts.ChartValues`1<hacketonApp.Model.Data>";
            _typeNameTable[3] = "LiveCharts.Helpers.NoisyCollection`1<hacketonApp.Model.Data>";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "hacketonApp.Model.Data";
            _typeNameTable[6] = "Double";
            _typeNameTable[7] = "Int32";
            _typeNameTable[8] = "System.Func`2<Double, String>";
            _typeNameTable[9] = "System.MulticastDelegate";
            _typeNameTable[10] = "System.Delegate";
            _typeNameTable[11] = "Windows.UI.Xaml.DispatcherTimer";
            _typeNameTable[12] = "Boolean";
            _typeNameTable[13] = "System.Random";
            _typeNameTable[14] = "hacketonApp.MainPage";
            _typeNameTable[15] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[16] = "LiveCharts.Uwp.CartesianChart";
            _typeNameTable[17] = "LiveCharts.Uwp.Charts.Base.Chart";
            _typeNameTable[18] = "LiveCharts.SeriesCollection";
            _typeNameTable[19] = "LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Definitions.Series.ISeriesView>";
            _typeNameTable[20] = "LiveCharts.Definitions.Series.ISeriesView";
            _typeNameTable[21] = "LiveCharts.SeriesAlgorithm";
            _typeNameTable[22] = "LiveCharts.IChartValues";
            _typeNameTable[23] = "System.Func`2<LiveCharts.ChartPoint, String>";
            _typeNameTable[24] = "LiveCharts.Uwp.AxesCollection";
            _typeNameTable[25] = "LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Uwp.Axis>";
            _typeNameTable[26] = "LiveCharts.Uwp.Axis";
            _typeNameTable[27] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[28] = "LiveCharts.Definitions.Charts.ISeparatorView";
            _typeNameTable[29] = "LiveCharts.AxisCore";
            _typeNameTable[30] = "System.Collections.Generic.IList`1<String>";
            _typeNameTable[31] = "String";
            _typeNameTable[32] = "LiveCharts.Uwp.SectionsCollection";
            _typeNameTable[33] = "LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Uwp.AxisSection>";
            _typeNameTable[34] = "LiveCharts.Uwp.AxisSection";
            _typeNameTable[35] = "LiveCharts.AxisSectionCore";
            _typeNameTable[36] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[37] = "Windows.UI.Xaml.Media.DoubleCollection";
            _typeNameTable[38] = "LiveCharts.AxisPosition";
            _typeNameTable[39] = "System.Enum";
            _typeNameTable[40] = "System.ValueType";
            _typeNameTable[41] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[42] = "Windows.UI.Text.FontWeight";
            _typeNameTable[43] = "Windows.UI.Text.FontStyle";
            _typeNameTable[44] = "Windows.UI.Text.FontStretch";
            _typeNameTable[45] = "LiveCharts.AxisOrientation";
            _typeNameTable[46] = "LiveCharts.VisualElementsCollection";
            _typeNameTable[47] = "LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Definitions.Charts.ICartesianVisualElement>";
            _typeNameTable[48] = "LiveCharts.Definitions.Charts.ICartesianVisualElement";
            _typeNameTable[49] = "LiveCharts.Uwp.ColorsCollection";
            _typeNameTable[50] = "System.Collections.Generic.List`1<Windows.UI.Color>";
            _typeNameTable[51] = "Windows.UI.Color";
            _typeNameTable[52] = "Byte";
            _typeNameTable[53] = "LiveCharts.ZoomingOptions";
            _typeNameTable[54] = "LiveCharts.LegendLocation";
            _typeNameTable[55] = "TimeSpan";
            _typeNameTable[56] = "LiveCharts.ScrollMode";
            _typeNameTable[57] = "LiveCharts.UpdaterState";
            _typeNameTable[58] = "LiveCharts.Charts.ChartCore";
            _typeNameTable[59] = "System.Collections.Generic.IEnumerable`1<LiveCharts.Definitions.Series.ISeriesView>";
            _typeNameTable[60] = "LiveCharts.Uwp.LineSeries";
            _typeNameTable[61] = "LiveCharts.Uwp.Series";
            _typeNameTable[62] = "System.Collections.Generic.IEnumerable`1<LiveCharts.ChartPoint>";
            _typeNameTable[63] = "LiveCharts.Uwp.PointGeometry";
            _typeNameTable[64] = "LiveCharts.Uwp.Separator";
            _typeNameTable[65] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[66] = "LiveCharts.Uwp.Points.PieSlice";
            _typeNameTable[67] = "Windows.UI.Xaml.Shapes.Path";

            _typeTable = new global::System.Type[68];
            _typeTable[0] = typeof(global::hacketonApp.View.Temperature);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::LiveCharts.ChartValues<global::hacketonApp.Model.Data>);
            _typeTable[3] = typeof(global::LiveCharts.Helpers.NoisyCollection<global::hacketonApp.Model.Data>);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::hacketonApp.Model.Data);
            _typeTable[6] = typeof(global::System.Double);
            _typeTable[7] = typeof(global::System.Int32);
            _typeTable[8] = typeof(global::System.Func<global::System.Double, global::System.String>);
            _typeTable[9] = typeof(global::System.MulticastDelegate);
            _typeTable[10] = typeof(global::System.Delegate);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.DispatcherTimer);
            _typeTable[12] = typeof(global::System.Boolean);
            _typeTable[13] = typeof(global::System.Random);
            _typeTable[14] = typeof(global::hacketonApp.MainPage);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[16] = typeof(global::LiveCharts.Uwp.CartesianChart);
            _typeTable[17] = typeof(global::LiveCharts.Uwp.Charts.Base.Chart);
            _typeTable[18] = typeof(global::LiveCharts.SeriesCollection);
            _typeTable[19] = typeof(global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Definitions.Series.ISeriesView>);
            _typeTable[20] = typeof(global::LiveCharts.Definitions.Series.ISeriesView);
            _typeTable[21] = typeof(global::LiveCharts.SeriesAlgorithm);
            _typeTable[22] = typeof(global::LiveCharts.IChartValues);
            _typeTable[23] = typeof(global::System.Func<global::LiveCharts.ChartPoint, global::System.String>);
            _typeTable[24] = typeof(global::LiveCharts.Uwp.AxesCollection);
            _typeTable[25] = typeof(global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Uwp.Axis>);
            _typeTable[26] = typeof(global::LiveCharts.Uwp.Axis);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[28] = typeof(global::LiveCharts.Definitions.Charts.ISeparatorView);
            _typeTable[29] = typeof(global::LiveCharts.AxisCore);
            _typeTable[30] = typeof(global::System.Collections.Generic.IList<global::System.String>);
            _typeTable[31] = typeof(global::System.String);
            _typeTable[32] = typeof(global::LiveCharts.Uwp.SectionsCollection);
            _typeTable[33] = typeof(global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Uwp.AxisSection>);
            _typeTable[34] = typeof(global::LiveCharts.Uwp.AxisSection);
            _typeTable[35] = typeof(global::LiveCharts.AxisSectionCore);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[37] = typeof(global::Windows.UI.Xaml.Media.DoubleCollection);
            _typeTable[38] = typeof(global::LiveCharts.AxisPosition);
            _typeTable[39] = typeof(global::System.Enum);
            _typeTable[40] = typeof(global::System.ValueType);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[42] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[43] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[44] = typeof(global::Windows.UI.Text.FontStretch);
            _typeTable[45] = typeof(global::LiveCharts.AxisOrientation);
            _typeTable[46] = typeof(global::LiveCharts.VisualElementsCollection);
            _typeTable[47] = typeof(global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Definitions.Charts.ICartesianVisualElement>);
            _typeTable[48] = typeof(global::LiveCharts.Definitions.Charts.ICartesianVisualElement);
            _typeTable[49] = typeof(global::LiveCharts.Uwp.ColorsCollection);
            _typeTable[50] = typeof(global::System.Collections.Generic.List<global::Windows.UI.Color>);
            _typeTable[51] = typeof(global::Windows.UI.Color);
            _typeTable[52] = typeof(global::System.Byte);
            _typeTable[53] = typeof(global::LiveCharts.ZoomingOptions);
            _typeTable[54] = typeof(global::LiveCharts.LegendLocation);
            _typeTable[55] = typeof(global::System.TimeSpan);
            _typeTable[56] = typeof(global::LiveCharts.ScrollMode);
            _typeTable[57] = typeof(global::LiveCharts.UpdaterState);
            _typeTable[58] = typeof(global::LiveCharts.Charts.ChartCore);
            _typeTable[59] = typeof(global::System.Collections.Generic.IEnumerable<global::LiveCharts.Definitions.Series.ISeriesView>);
            _typeTable[60] = typeof(global::LiveCharts.Uwp.LineSeries);
            _typeTable[61] = typeof(global::LiveCharts.Uwp.Series);
            _typeTable[62] = typeof(global::System.Collections.Generic.IEnumerable<global::LiveCharts.ChartPoint>);
            _typeTable[63] = typeof(global::LiveCharts.Uwp.PointGeometry);
            _typeTable[64] = typeof(global::LiveCharts.Uwp.Separator);
            _typeTable[65] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[66] = typeof(global::LiveCharts.Uwp.Points.PieSlice);
            _typeTable[67] = typeof(global::Windows.UI.Xaml.Shapes.Path);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_Temperature() { return new global::hacketonApp.View.Temperature(); }
        private object Activate_2_ChartValues() { return new global::LiveCharts.ChartValues<global::hacketonApp.Model.Data>(); }
        private object Activate_3_NoisyCollection() { return new global::LiveCharts.Helpers.NoisyCollection<global::hacketonApp.Model.Data>(); }
        private object Activate_5_Data() { return new global::hacketonApp.Model.Data(); }
        private object Activate_13_Random() { return new global::System.Random(); }
        private object Activate_14_MainPage() { return new global::hacketonApp.MainPage(); }
        private object Activate_16_CartesianChart() { return new global::LiveCharts.Uwp.CartesianChart(); }
        private object Activate_18_SeriesCollection() { return new global::LiveCharts.SeriesCollection(); }
        private object Activate_19_NoisyCollection() { return new global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Definitions.Series.ISeriesView>(); }
        private object Activate_24_AxesCollection() { return new global::LiveCharts.Uwp.AxesCollection(); }
        private object Activate_25_NoisyCollection() { return new global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Uwp.Axis>(); }
        private object Activate_26_Axis() { return new global::LiveCharts.Uwp.Axis(); }
        private object Activate_32_SectionsCollection() { return new global::LiveCharts.Uwp.SectionsCollection(); }
        private object Activate_33_NoisyCollection() { return new global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Uwp.AxisSection>(); }
        private object Activate_34_AxisSection() { return new global::LiveCharts.Uwp.AxisSection(); }
        private object Activate_46_VisualElementsCollection() { return new global::LiveCharts.VisualElementsCollection(); }
        private object Activate_47_NoisyCollection() { return new global::LiveCharts.Helpers.NoisyCollection<global::LiveCharts.Definitions.Charts.ICartesianVisualElement>(); }
        private object Activate_49_ColorsCollection() { return new global::LiveCharts.Uwp.ColorsCollection(); }
        private object Activate_50_List() { return new global::System.Collections.Generic.List<global::Windows.UI.Color>(); }
        private object Activate_60_LineSeries() { return new global::LiveCharts.Uwp.LineSeries(); }
        private object Activate_63_PointGeometry() { return new global::LiveCharts.Uwp.PointGeometry(); }
        private object Activate_64_Separator() { return new global::LiveCharts.Uwp.Separator(); }
        private object Activate_66_PieSlice() { return new global::LiveCharts.Uwp.Points.PieSlice(); }
        private void VectorAdd_2_ChartValues(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::hacketonApp.Model.Data>)instance;
            var newItem = (global::hacketonApp.Model.Data)item;
            collection.Add(newItem);
        }
        private void VectorAdd_3_NoisyCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::hacketonApp.Model.Data>)instance;
            var newItem = (global::hacketonApp.Model.Data)item;
            collection.Add(newItem);
        }
        private void VectorAdd_18_SeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Definitions.Series.ISeriesView>)instance;
            var newItem = (global::LiveCharts.Definitions.Series.ISeriesView)item;
            collection.Add(newItem);
        }
        private void VectorAdd_19_NoisyCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Definitions.Series.ISeriesView>)instance;
            var newItem = (global::LiveCharts.Definitions.Series.ISeriesView)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_AxesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Uwp.Axis>)instance;
            var newItem = (global::LiveCharts.Uwp.Axis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_NoisyCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Uwp.Axis>)instance;
            var newItem = (global::LiveCharts.Uwp.Axis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_30_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_SectionsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Uwp.AxisSection>)instance;
            var newItem = (global::LiveCharts.Uwp.AxisSection)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_NoisyCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Uwp.AxisSection>)instance;
            var newItem = (global::LiveCharts.Uwp.AxisSection)item;
            collection.Add(newItem);
        }
        private void VectorAdd_46_VisualElementsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Definitions.Charts.ICartesianVisualElement>)instance;
            var newItem = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)item;
            collection.Add(newItem);
        }
        private void VectorAdd_47_NoisyCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::LiveCharts.Definitions.Charts.ICartesianVisualElement>)instance;
            var newItem = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)item;
            collection.Add(newItem);
        }
        private void VectorAdd_49_ColorsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Color>)instance;
            var newItem = (global::Windows.UI.Color)item;
            collection.Add(newItem);
        }
        private void VectorAdd_50_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Color>)instance;
            var newItem = (global::Windows.UI.Color)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  hacketonApp.View.Temperature
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_Temperature;
                userType.AddMemberName("ChartValues");
                userType.AddMemberName("DateTimeFormatter");
                userType.AddMemberName("AxisStep");
                userType.AddMemberName("AxisMax");
                userType.AddMemberName("AxisMin");
                userType.AddMemberName("Timer");
                userType.AddMemberName("IsDataInjectionRunning");
                userType.AddMemberName("R");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  LiveCharts.ChartValues`1<hacketonApp.Model.Data>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("LiveCharts.Helpers.NoisyCollection`1<hacketonApp.Model.Data>"));
                userType.CollectionAdd = VectorAdd_2_ChartValues;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  LiveCharts.Helpers.NoisyCollection`1<hacketonApp.Model.Data>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_NoisyCollection;
                userType.CollectionAdd = VectorAdd_3_NoisyCollection;
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  hacketonApp.Model.Data
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_Data;
                userType.AddMemberName("Temperature");
                userType.AddMemberName("Windspeed");
                userType.AddMemberName("WindOrientation");
                userType.AddMemberName("ParticleSize");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Double
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Int32
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  System.Func`2<Double, String>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  System.MulticastDelegate
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 10:   //  System.Delegate
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 11:   //  Windows.UI.Xaml.DispatcherTimer
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Boolean
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  System.Random
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  hacketonApp.MainPage
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_MainPage;
                userType.AddMemberName("ChartValues");
                userType.AddMemberName("DateTimeFormatter");
                userType.AddMemberName("AxisStep");
                userType.AddMemberName("AxisMax");
                userType.AddMemberName("AxisMin");
                userType.AddMemberName("Timer");
                userType.AddMemberName("IsDataInjectionRunning");
                userType.AddMemberName("R");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  LiveCharts.Uwp.CartesianChart
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart"));
                userType.Activator = Activate_16_CartesianChart;
                userType.AddMemberName("VisualElements");
                xamlType = userType;
                break;

            case 17:   //  LiveCharts.Uwp.Charts.Base.Chart
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("Series");
                userType.AddMemberName("AxisX");
                userType.AddMemberName("IsMocked");
                userType.AddMemberName("SeriesColors");
                userType.AddMemberName("AxisY");
                userType.AddMemberName("ChartLegend");
                userType.AddMemberName("Zoom");
                userType.AddMemberName("LegendLocation");
                userType.AddMemberName("AnimationsSpeed");
                userType.AddMemberName("DisableAnimations");
                userType.AddMemberName("DataTooltip");
                userType.AddMemberName("Hoverable");
                userType.AddMemberName("ScrollMode");
                userType.AddMemberName("ScrollHorizontalFrom");
                userType.AddMemberName("ScrollHorizontalTo");
                userType.AddMemberName("ScrollVerticalFrom");
                userType.AddMemberName("ScrollVerticalTo");
                userType.AddMemberName("ScrollBarFill");
                userType.AddMemberName("ZoomingSpeed");
                userType.AddMemberName("UpdaterState");
                userType.AddMemberName("Model");
                userType.AddMemberName("HasTooltip");
                userType.AddMemberName("HasDataClickEventAttached");
                userType.AddMemberName("IsControlLoaded");
                userType.AddMemberName("IsInDesignMode");
                userType.AddMemberName("ActualSeries");
                userType.AddMemberName("TooltipTimeout");
                xamlType = userType;
                break;

            case 18:   //  LiveCharts.SeriesCollection
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Definitions.Series.ISeriesView>"));
                userType.CollectionAdd = VectorAdd_18_SeriesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Definitions.Series.ISeriesView>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_NoisyCollection;
                userType.CollectionAdd = VectorAdd_19_NoisyCollection;
                xamlType = userType;
                break;

            case 20:   //  LiveCharts.Definitions.Series.ISeriesView
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.AddMemberName("Model");
                userType.AddMemberName("Values");
                userType.AddMemberName("DataLabels");
                userType.AddMemberName("ScalesXAt");
                userType.AddMemberName("ScalesYAt");
                userType.AddMemberName("Configuration");
                userType.AddMemberName("IsSeriesVisible");
                userType.AddMemberName("LabelPoint");
                userType.AddMemberName("ActualValues");
                xamlType = userType;
                break;

            case 21:   //  LiveCharts.SeriesAlgorithm
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  LiveCharts.IChartValues
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Func`2<LiveCharts.ChartPoint, String>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  LiveCharts.Uwp.AxesCollection
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Uwp.Axis>"));
                userType.CollectionAdd = VectorAdd_24_AxesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Uwp.Axis>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_NoisyCollection;
                userType.CollectionAdd = VectorAdd_25_NoisyCollection;
                xamlType = userType;
                break;

            case 26:   //  LiveCharts.Uwp.Axis
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_26_Axis;
                userType.AddMemberName("LabelFormatter");
                userType.AddMemberName("MaxValue");
                userType.AddMemberName("MinValue");
                userType.AddMemberName("Separator");
                userType.AddMemberName("Model");
                userType.AddMemberName("PreviousMaxValue");
                userType.AddMemberName("PreviousMinValue");
                userType.AddMemberName("Labels");
                userType.AddMemberName("Sections");
                userType.AddMemberName("ShowLabels");
                userType.AddMemberName("MinRange");
                userType.AddMemberName("MaxRange");
                userType.AddMemberName("Title");
                userType.AddMemberName("Position");
                userType.AddMemberName("IsMerged");
                userType.AddMemberName("BarUnit");
                userType.AddMemberName("DisableAnimations");
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("FontStretch");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("LabelsRotation");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("AxisOrientation");
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  LiveCharts.Definitions.Charts.ISeparatorView
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  LiveCharts.AxisCore
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  System.Collections.Generic.IList`1<String>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_30_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  String
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  LiveCharts.Uwp.SectionsCollection
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Uwp.AxisSection>"));
                userType.CollectionAdd = VectorAdd_32_SectionsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Uwp.AxisSection>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_NoisyCollection;
                userType.CollectionAdd = VectorAdd_33_NoisyCollection;
                xamlType = userType;
                break;

            case 34:   //  LiveCharts.Uwp.AxisSection
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_34_AxisSection;
                userType.AddMemberName("Model");
                userType.AddMemberName("Label");
                userType.AddMemberName("Value");
                userType.AddMemberName("SectionWidth");
                userType.AddMemberName("Draggable");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("Fill");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("StrokeDashArray");
                xamlType = userType;
                break;

            case 35:   //  LiveCharts.AxisSectionCore
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Windows.UI.Xaml.Media.DoubleCollection
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  LiveCharts.AxisPosition
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("LeftBottom", global::LiveCharts.AxisPosition.LeftBottom);
                userType.AddEnumValue("RightTop", global::LiveCharts.AxisPosition.RightTop);
                xamlType = userType;
                break;

            case 39:   //  System.Enum
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 40:   //  System.ValueType
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Windows.UI.Text.FontWeight
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  Windows.UI.Text.FontStyle
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 44:   //  Windows.UI.Text.FontStretch
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Undefined", global::Windows.UI.Text.FontStretch.Undefined);
                userType.AddEnumValue("UltraCondensed", global::Windows.UI.Text.FontStretch.UltraCondensed);
                userType.AddEnumValue("ExtraCondensed", global::Windows.UI.Text.FontStretch.ExtraCondensed);
                userType.AddEnumValue("Condensed", global::Windows.UI.Text.FontStretch.Condensed);
                userType.AddEnumValue("SemiCondensed", global::Windows.UI.Text.FontStretch.SemiCondensed);
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStretch.Normal);
                userType.AddEnumValue("SemiExpanded", global::Windows.UI.Text.FontStretch.SemiExpanded);
                userType.AddEnumValue("Expanded", global::Windows.UI.Text.FontStretch.Expanded);
                userType.AddEnumValue("ExtraExpanded", global::Windows.UI.Text.FontStretch.ExtraExpanded);
                userType.AddEnumValue("UltraExpanded", global::Windows.UI.Text.FontStretch.UltraExpanded);
                xamlType = userType;
                break;

            case 45:   //  LiveCharts.AxisOrientation
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::LiveCharts.AxisOrientation.None);
                userType.AddEnumValue("X", global::LiveCharts.AxisOrientation.X);
                userType.AddEnumValue("Y", global::LiveCharts.AxisOrientation.Y);
                xamlType = userType;
                break;

            case 46:   //  LiveCharts.VisualElementsCollection
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Definitions.Charts.ICartesianVisualElement>"));
                userType.CollectionAdd = VectorAdd_46_VisualElementsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  LiveCharts.Helpers.NoisyCollection`1<LiveCharts.Definitions.Charts.ICartesianVisualElement>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_47_NoisyCollection;
                userType.CollectionAdd = VectorAdd_47_NoisyCollection;
                xamlType = userType;
                break;

            case 48:   //  LiveCharts.Definitions.Charts.ICartesianVisualElement
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.AddMemberName("X");
                userType.AddMemberName("Y");
                userType.AddMemberName("AxisX");
                userType.AddMemberName("AxisY");
                xamlType = userType;
                break;

            case 49:   //  LiveCharts.Uwp.ColorsCollection
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.List`1<Windows.UI.Color>"));
                userType.CollectionAdd = VectorAdd_49_ColorsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 50:   //  System.Collections.Generic.List`1<Windows.UI.Color>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_50_List;
                userType.CollectionAdd = VectorAdd_50_List;
                xamlType = userType;
                break;

            case 51:   //  Windows.UI.Color
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 52:   //  Byte
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  LiveCharts.ZoomingOptions
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::LiveCharts.ZoomingOptions.None);
                userType.AddEnumValue("X", global::LiveCharts.ZoomingOptions.X);
                userType.AddEnumValue("Y", global::LiveCharts.ZoomingOptions.Y);
                userType.AddEnumValue("Xy", global::LiveCharts.ZoomingOptions.Xy);
                xamlType = userType;
                break;

            case 54:   //  LiveCharts.LegendLocation
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::LiveCharts.LegendLocation.None);
                userType.AddEnumValue("Top", global::LiveCharts.LegendLocation.Top);
                userType.AddEnumValue("Bottom", global::LiveCharts.LegendLocation.Bottom);
                userType.AddEnumValue("Left", global::LiveCharts.LegendLocation.Left);
                userType.AddEnumValue("Right", global::LiveCharts.LegendLocation.Right);
                xamlType = userType;
                break;

            case 55:   //  TimeSpan
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  LiveCharts.ScrollMode
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::LiveCharts.ScrollMode.None);
                userType.AddEnumValue("X", global::LiveCharts.ScrollMode.X);
                userType.AddEnumValue("Y", global::LiveCharts.ScrollMode.Y);
                userType.AddEnumValue("XY", global::LiveCharts.ScrollMode.XY);
                xamlType = userType;
                break;

            case 57:   //  LiveCharts.UpdaterState
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Running", global::LiveCharts.UpdaterState.Running);
                userType.AddEnumValue("Paused", global::LiveCharts.UpdaterState.Paused);
                xamlType = userType;
                break;

            case 58:   //  LiveCharts.Charts.ChartCore
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  System.Collections.Generic.IEnumerable`1<LiveCharts.Definitions.Series.ISeriesView>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 60:   //  LiveCharts.Uwp.LineSeries
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("LiveCharts.Uwp.Series"));
                userType.Activator = Activate_60_LineSeries;
                userType.AddMemberName("PointGeometrySize");
                userType.AddMemberName("PointForeround");
                userType.AddMemberName("LineSmoothness");
                userType.AddMemberName("AreaLimit");
                xamlType = userType;
                break;

            case 61:   //  LiveCharts.Uwp.Series
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.AddMemberName("Values");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("Model");
                userType.AddMemberName("ActualValues");
                userType.AddMemberName("IsSeriesVisible");
                userType.AddMemberName("ChartPoints");
                userType.AddMemberName("Title");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("Fill");
                userType.AddMemberName("DataLabels");
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("FontStretch");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("StrokeDashArray");
                userType.AddMemberName("PointGeometry");
                userType.AddMemberName("ScalesXAt");
                userType.AddMemberName("ScalesYAt");
                userType.AddMemberName("LabelPoint");
                userType.AddMemberName("Configuration");
                xamlType = userType;
                break;

            case 62:   //  System.Collections.Generic.IEnumerable`1<LiveCharts.ChartPoint>
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  LiveCharts.Uwp.PointGeometry
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  LiveCharts.Uwp.Separator
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_64_Separator;
                userType.AddMemberName("Step");
                userType.AddMemberName("Chart");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("StrokeDashArray");
                userType.AddMemberName("AxisOrientation");
                xamlType = userType;
                break;

            case 65:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 66:   //  LiveCharts.Uwp.Points.PieSlice
                userType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Shapes.Path"));
                userType.Activator = Activate_66_PieSlice;
                userType.AddMemberName("Radius");
                userType.AddMemberName("PushOut");
                userType.AddMemberName("InnerRadius");
                userType.AddMemberName("WedgeAngle");
                userType.AddMemberName("RotationAngle");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.AddMemberName("Percentage");
                userType.AddMemberName("PieceValue");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 67:   //  Windows.UI.Xaml.Shapes.Path
                xamlType = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::LiveCharts.Uwp.UwpView_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_Temperature_ChartValues(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.ChartValues;
        }
        private void set_0_Temperature_ChartValues(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.ChartValues = (global::LiveCharts.ChartValues<global::hacketonApp.Model.Data>)Value;
        }
        private object get_1_Data_Temperature(object instance)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            return that.Temperature;
        }
        private void set_1_Data_Temperature(object instance, object Value)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            that.Temperature = (global::System.Double)Value;
        }
        private object get_2_Data_Windspeed(object instance)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            return that.Windspeed;
        }
        private void set_2_Data_Windspeed(object instance, object Value)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            that.Windspeed = (global::System.Double)Value;
        }
        private object get_3_Data_WindOrientation(object instance)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            return that.WindOrientation;
        }
        private void set_3_Data_WindOrientation(object instance, object Value)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            that.WindOrientation = (global::System.Int32)Value;
        }
        private object get_4_Data_ParticleSize(object instance)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            return that.ParticleSize;
        }
        private void set_4_Data_ParticleSize(object instance, object Value)
        {
            var that = (global::hacketonApp.Model.Data)instance;
            that.ParticleSize = (global::System.Double)Value;
        }
        private object get_5_Temperature_DateTimeFormatter(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.DateTimeFormatter;
        }
        private void set_5_Temperature_DateTimeFormatter(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.DateTimeFormatter = (global::System.Func<global::System.Double, global::System.String>)Value;
        }
        private object get_6_Temperature_AxisStep(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.AxisStep;
        }
        private void set_6_Temperature_AxisStep(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.AxisStep = (global::System.Double)Value;
        }
        private object get_7_Temperature_AxisMax(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.AxisMax;
        }
        private void set_7_Temperature_AxisMax(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.AxisMax = (global::System.Double)Value;
        }
        private object get_8_Temperature_AxisMin(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.AxisMin;
        }
        private void set_8_Temperature_AxisMin(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.AxisMin = (global::System.Double)Value;
        }
        private object get_9_Temperature_Timer(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.Timer;
        }
        private void set_9_Temperature_Timer(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.Timer = (global::Windows.UI.Xaml.DispatcherTimer)Value;
        }
        private object get_10_Temperature_IsDataInjectionRunning(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.IsDataInjectionRunning;
        }
        private void set_10_Temperature_IsDataInjectionRunning(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.IsDataInjectionRunning = (global::System.Boolean)Value;
        }
        private object get_11_Temperature_R(object instance)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            return that.R;
        }
        private void set_11_Temperature_R(object instance, object Value)
        {
            var that = (global::hacketonApp.View.Temperature)instance;
            that.R = (global::System.Random)Value;
        }
        private object get_12_MainPage_ChartValues(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.ChartValues;
        }
        private void set_12_MainPage_ChartValues(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.ChartValues = (global::LiveCharts.ChartValues<global::hacketonApp.Model.Data>)Value;
        }
        private object get_13_MainPage_DateTimeFormatter(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.DateTimeFormatter;
        }
        private void set_13_MainPage_DateTimeFormatter(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.DateTimeFormatter = (global::System.Func<global::System.Double, global::System.String>)Value;
        }
        private object get_14_MainPage_AxisStep(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.AxisStep;
        }
        private void set_14_MainPage_AxisStep(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.AxisStep = (global::System.Double)Value;
        }
        private object get_15_MainPage_AxisMax(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.AxisMax;
        }
        private void set_15_MainPage_AxisMax(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.AxisMax = (global::System.Double)Value;
        }
        private object get_16_MainPage_AxisMin(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.AxisMin;
        }
        private void set_16_MainPage_AxisMin(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.AxisMin = (global::System.Double)Value;
        }
        private object get_17_MainPage_Timer(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.Timer;
        }
        private void set_17_MainPage_Timer(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.Timer = (global::Windows.UI.Xaml.DispatcherTimer)Value;
        }
        private object get_18_MainPage_IsDataInjectionRunning(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.IsDataInjectionRunning;
        }
        private void set_18_MainPage_IsDataInjectionRunning(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.IsDataInjectionRunning = (global::System.Boolean)Value;
        }
        private object get_19_MainPage_R(object instance)
        {
            var that = (global::hacketonApp.MainPage)instance;
            return that.R;
        }
        private void set_19_MainPage_R(object instance, object Value)
        {
            var that = (global::hacketonApp.MainPage)instance;
            that.R = (global::System.Random)Value;
        }
        private object get_20_Chart_Series(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.Series;
        }
        private void set_20_Chart_Series(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.Series = (global::LiveCharts.SeriesCollection)Value;
        }
        private object get_21_ISeriesView_Model(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.Model;
        }
        private void set_21_ISeriesView_Model(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            that.Model = (global::LiveCharts.SeriesAlgorithm)Value;
        }
        private object get_22_ISeriesView_Values(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.Values;
        }
        private void set_22_ISeriesView_Values(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            that.Values = (global::LiveCharts.IChartValues)Value;
        }
        private object get_23_ISeriesView_DataLabels(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.DataLabels;
        }
        private object get_24_ISeriesView_ScalesXAt(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.ScalesXAt;
        }
        private void set_24_ISeriesView_ScalesXAt(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            that.ScalesXAt = (global::System.Int32)Value;
        }
        private object get_25_ISeriesView_ScalesYAt(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.ScalesYAt;
        }
        private void set_25_ISeriesView_ScalesYAt(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            that.ScalesYAt = (global::System.Int32)Value;
        }
        private object get_26_ISeriesView_Configuration(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.Configuration;
        }
        private void set_26_ISeriesView_Configuration(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            that.Configuration = (global::System.Object)Value;
        }
        private object get_27_ISeriesView_IsSeriesVisible(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.IsSeriesVisible;
        }
        private object get_28_ISeriesView_LabelPoint(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.LabelPoint;
        }
        private void set_28_ISeriesView_LabelPoint(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            that.LabelPoint = (global::System.Func<global::LiveCharts.ChartPoint, global::System.String>)Value;
        }
        private object get_29_ISeriesView_ActualValues(object instance)
        {
            var that = (global::LiveCharts.Definitions.Series.ISeriesView)instance;
            return that.ActualValues;
        }
        private object get_30_Chart_AxisX(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.AxisX;
        }
        private void set_30_Chart_AxisX(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.AxisX = (global::LiveCharts.Uwp.AxesCollection)Value;
        }
        private object get_31_Axis_LabelFormatter(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.LabelFormatter;
        }
        private void set_31_Axis_LabelFormatter(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.LabelFormatter = (global::System.Func<global::System.Double, global::System.String>)Value;
        }
        private object get_32_Axis_MaxValue(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.MaxValue;
        }
        private void set_32_Axis_MaxValue(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.MaxValue = (global::System.Double)Value;
        }
        private object get_33_Axis_MinValue(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.MinValue;
        }
        private void set_33_Axis_MinValue(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.MinValue = (global::System.Double)Value;
        }
        private object get_34_Axis_Separator(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.Separator;
        }
        private void set_34_Axis_Separator(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.Separator = (global::LiveCharts.Definitions.Charts.ISeparatorView)Value;
        }
        private object get_35_Axis_Model(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.Model;
        }
        private void set_35_Axis_Model(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.Model = (global::LiveCharts.AxisCore)Value;
        }
        private object get_36_Axis_PreviousMaxValue(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.PreviousMaxValue;
        }
        private object get_37_Axis_PreviousMinValue(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.PreviousMinValue;
        }
        private object get_38_Axis_Labels(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.Labels;
        }
        private void set_38_Axis_Labels(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.Labels = (global::System.Collections.Generic.IList<global::System.String>)Value;
        }
        private object get_39_Axis_Sections(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.Sections;
        }
        private void set_39_Axis_Sections(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.Sections = (global::LiveCharts.Uwp.SectionsCollection)Value;
        }
        private object get_40_AxisSection_Model(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.Model;
        }
        private void set_40_AxisSection_Model(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.Model = (global::LiveCharts.AxisSectionCore)Value;
        }
        private object get_41_AxisSection_Label(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.Label;
        }
        private void set_41_AxisSection_Label(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_42_AxisSection_Value(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.Value;
        }
        private void set_42_AxisSection_Value(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_43_AxisSection_SectionWidth(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.SectionWidth;
        }
        private void set_43_AxisSection_SectionWidth(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.SectionWidth = (global::System.Double)Value;
        }
        private object get_44_AxisSection_Draggable(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.Draggable;
        }
        private void set_44_AxisSection_Draggable(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.Draggable = (global::System.Boolean)Value;
        }
        private object get_45_AxisSection_Stroke(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.Stroke;
        }
        private void set_45_AxisSection_Stroke(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.Stroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_46_AxisSection_Fill(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.Fill;
        }
        private void set_46_AxisSection_Fill(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.Fill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_47_AxisSection_StrokeThickness(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.StrokeThickness;
        }
        private void set_47_AxisSection_StrokeThickness(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_48_AxisSection_StrokeDashArray(object instance)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            return that.StrokeDashArray;
        }
        private void set_48_AxisSection_StrokeDashArray(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.AxisSection)instance;
            that.StrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_49_Axis_ShowLabels(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.ShowLabels;
        }
        private void set_49_Axis_ShowLabels(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_50_Axis_MinRange(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.MinRange;
        }
        private void set_50_Axis_MinRange(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.MinRange = (global::System.Double)Value;
        }
        private object get_51_Axis_MaxRange(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.MaxRange;
        }
        private void set_51_Axis_MaxRange(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.MaxRange = (global::System.Double)Value;
        }
        private object get_52_Axis_Title(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.Title;
        }
        private void set_52_Axis_Title(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_53_Axis_Position(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.Position;
        }
        private void set_53_Axis_Position(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.Position = (global::LiveCharts.AxisPosition)Value;
        }
        private object get_54_Axis_IsMerged(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.IsMerged;
        }
        private void set_54_Axis_IsMerged(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.IsMerged = (global::System.Boolean)Value;
        }
        private object get_55_Axis_BarUnit(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.BarUnit;
        }
        private void set_55_Axis_BarUnit(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.BarUnit = (global::System.Double)Value;
        }
        private object get_56_Axis_DisableAnimations(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.DisableAnimations;
        }
        private void set_56_Axis_DisableAnimations(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.DisableAnimations = (global::System.Boolean)Value;
        }
        private object get_57_Axis_FontFamily(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.FontFamily;
        }
        private void set_57_Axis_FontFamily(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_58_Axis_FontSize(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.FontSize;
        }
        private void set_58_Axis_FontSize(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_59_Axis_FontWeight(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.FontWeight;
        }
        private void set_59_Axis_FontWeight(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_60_Axis_FontStyle(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.FontStyle;
        }
        private void set_60_Axis_FontStyle(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_61_Axis_FontStretch(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.FontStretch;
        }
        private void set_61_Axis_FontStretch(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.FontStretch = (global::Windows.UI.Text.FontStretch)Value;
        }
        private object get_62_Axis_Foreground(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.Foreground;
        }
        private void set_62_Axis_Foreground(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_63_Axis_LabelsRotation(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.LabelsRotation;
        }
        private void set_63_Axis_LabelsRotation(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.LabelsRotation = (global::System.Double)Value;
        }
        private object get_64_Axis_IsEnabled(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.IsEnabled;
        }
        private void set_64_Axis_IsEnabled(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_65_Axis_AxisOrientation(object instance)
        {
            var that = (global::LiveCharts.Uwp.Axis)instance;
            return that.AxisOrientation;
        }
        private object get_66_CartesianChart_VisualElements(object instance)
        {
            var that = (global::LiveCharts.Uwp.CartesianChart)instance;
            return that.VisualElements;
        }
        private void set_66_CartesianChart_VisualElements(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.CartesianChart)instance;
            that.VisualElements = (global::LiveCharts.VisualElementsCollection)Value;
        }
        private object get_67_ICartesianVisualElement_X(object instance)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            return that.X;
        }
        private void set_67_ICartesianVisualElement_X(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            that.X = (global::System.Double)Value;
        }
        private object get_68_ICartesianVisualElement_Y(object instance)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            return that.Y;
        }
        private void set_68_ICartesianVisualElement_Y(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            that.Y = (global::System.Double)Value;
        }
        private object get_69_ICartesianVisualElement_AxisX(object instance)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            return that.AxisX;
        }
        private void set_69_ICartesianVisualElement_AxisX(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            that.AxisX = (global::System.Int32)Value;
        }
        private object get_70_ICartesianVisualElement_AxisY(object instance)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            return that.AxisY;
        }
        private void set_70_ICartesianVisualElement_AxisY(object instance, object Value)
        {
            var that = (global::LiveCharts.Definitions.Charts.ICartesianVisualElement)instance;
            that.AxisY = (global::System.Int32)Value;
        }
        private object get_71_Chart_IsMocked(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.IsMocked;
        }
        private void set_71_Chart_IsMocked(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.IsMocked = (global::System.Boolean)Value;
        }
        private object get_72_Chart_SeriesColors(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.SeriesColors;
        }
        private void set_72_Chart_SeriesColors(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.SeriesColors = (global::LiveCharts.Uwp.ColorsCollection)Value;
        }
        private object get_73_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_73_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_74_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_74_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_75_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_75_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_76_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_76_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_77_Chart_AxisY(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.AxisY;
        }
        private void set_77_Chart_AxisY(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.AxisY = (global::LiveCharts.Uwp.AxesCollection)Value;
        }
        private object get_78_Chart_ChartLegend(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ChartLegend;
        }
        private void set_78_Chart_ChartLegend(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ChartLegend = (global::Windows.UI.Xaml.Controls.UserControl)Value;
        }
        private object get_79_Chart_Zoom(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.Zoom;
        }
        private void set_79_Chart_Zoom(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.Zoom = (global::LiveCharts.ZoomingOptions)Value;
        }
        private object get_80_Chart_LegendLocation(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.LegendLocation;
        }
        private void set_80_Chart_LegendLocation(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.LegendLocation = (global::LiveCharts.LegendLocation)Value;
        }
        private object get_81_Chart_AnimationsSpeed(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.AnimationsSpeed;
        }
        private void set_81_Chart_AnimationsSpeed(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.AnimationsSpeed = (global::System.TimeSpan)Value;
        }
        private object get_82_Chart_DisableAnimations(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.DisableAnimations;
        }
        private void set_82_Chart_DisableAnimations(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.DisableAnimations = (global::System.Boolean)Value;
        }
        private object get_83_Chart_DataTooltip(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.DataTooltip;
        }
        private void set_83_Chart_DataTooltip(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.DataTooltip = (global::Windows.UI.Xaml.Controls.UserControl)Value;
        }
        private object get_84_Chart_Hoverable(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.Hoverable;
        }
        private void set_84_Chart_Hoverable(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.Hoverable = (global::System.Boolean)Value;
        }
        private object get_85_Chart_ScrollMode(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ScrollMode;
        }
        private void set_85_Chart_ScrollMode(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ScrollMode = (global::LiveCharts.ScrollMode)Value;
        }
        private object get_86_Chart_ScrollHorizontalFrom(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ScrollHorizontalFrom;
        }
        private void set_86_Chart_ScrollHorizontalFrom(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ScrollHorizontalFrom = (global::System.Double)Value;
        }
        private object get_87_Chart_ScrollHorizontalTo(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ScrollHorizontalTo;
        }
        private void set_87_Chart_ScrollHorizontalTo(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ScrollHorizontalTo = (global::System.Double)Value;
        }
        private object get_88_Chart_ScrollVerticalFrom(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ScrollVerticalFrom;
        }
        private void set_88_Chart_ScrollVerticalFrom(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ScrollVerticalFrom = (global::System.Double)Value;
        }
        private object get_89_Chart_ScrollVerticalTo(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ScrollVerticalTo;
        }
        private void set_89_Chart_ScrollVerticalTo(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ScrollVerticalTo = (global::System.Double)Value;
        }
        private object get_90_Chart_ScrollBarFill(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ScrollBarFill;
        }
        private void set_90_Chart_ScrollBarFill(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ScrollBarFill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_91_Chart_ZoomingSpeed(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ZoomingSpeed;
        }
        private void set_91_Chart_ZoomingSpeed(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.ZoomingSpeed = (global::System.Double)Value;
        }
        private object get_92_Chart_UpdaterState(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.UpdaterState;
        }
        private void set_92_Chart_UpdaterState(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.UpdaterState = (global::LiveCharts.UpdaterState)Value;
        }
        private object get_93_Chart_Model(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.Model;
        }
        private object get_94_Chart_HasTooltip(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.HasTooltip;
        }
        private object get_95_Chart_HasDataClickEventAttached(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.HasDataClickEventAttached;
        }
        private object get_96_Chart_IsControlLoaded(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.IsControlLoaded;
        }
        private object get_97_Chart_IsInDesignMode(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.IsInDesignMode;
        }
        private object get_98_Chart_ActualSeries(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.ActualSeries;
        }
        private object get_99_Chart_TooltipTimeout(object instance)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            return that.TooltipTimeout;
        }
        private void set_99_Chart_TooltipTimeout(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Charts.Base.Chart)instance;
            that.TooltipTimeout = (global::System.TimeSpan)Value;
        }
        private object get_100_Series_Values(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.Values;
        }
        private void set_100_Series_Values(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.Values = (global::LiveCharts.IChartValues)Value;
        }
        private object get_101_LineSeries_PointGeometrySize(object instance)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            return that.PointGeometrySize;
        }
        private void set_101_LineSeries_PointGeometrySize(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            that.PointGeometrySize = (global::System.Double)Value;
        }
        private object get_102_Series_StrokeThickness(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.StrokeThickness;
        }
        private void set_102_Series_StrokeThickness(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_103_LineSeries_PointForeround(object instance)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            return that.PointForeround;
        }
        private void set_103_LineSeries_PointForeround(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            that.PointForeround = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_104_LineSeries_LineSmoothness(object instance)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            return that.LineSmoothness;
        }
        private void set_104_LineSeries_LineSmoothness(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            that.LineSmoothness = (global::System.Double)Value;
        }
        private object get_105_LineSeries_AreaLimit(object instance)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            return that.AreaLimit;
        }
        private void set_105_LineSeries_AreaLimit(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.LineSeries)instance;
            that.AreaLimit = (global::System.Double)Value;
        }
        private object get_106_Series_Model(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.Model;
        }
        private void set_106_Series_Model(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.Model = (global::LiveCharts.SeriesAlgorithm)Value;
        }
        private object get_107_Series_ActualValues(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.ActualValues;
        }
        private object get_108_Series_IsSeriesVisible(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.IsSeriesVisible;
        }
        private object get_109_Series_ChartPoints(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.ChartPoints;
        }
        private object get_110_Series_Title(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.Title;
        }
        private void set_110_Series_Title(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_111_Series_Stroke(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.Stroke;
        }
        private void set_111_Series_Stroke(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.Stroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_112_Series_Fill(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.Fill;
        }
        private void set_112_Series_Fill(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.Fill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_113_Series_DataLabels(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.DataLabels;
        }
        private void set_113_Series_DataLabels(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.DataLabels = (global::System.Boolean)Value;
        }
        private object get_114_Series_FontFamily(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.FontFamily;
        }
        private void set_114_Series_FontFamily(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_115_Series_FontSize(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.FontSize;
        }
        private void set_115_Series_FontSize(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_116_Series_FontWeight(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.FontWeight;
        }
        private void set_116_Series_FontWeight(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_117_Series_FontStyle(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.FontStyle;
        }
        private void set_117_Series_FontStyle(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_118_Series_FontStretch(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.FontStretch;
        }
        private void set_118_Series_FontStretch(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.FontStretch = (global::Windows.UI.Text.FontStretch)Value;
        }
        private object get_119_Series_Foreground(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.Foreground;
        }
        private void set_119_Series_Foreground(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_120_Series_StrokeDashArray(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.StrokeDashArray;
        }
        private void set_120_Series_StrokeDashArray(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.StrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_121_Series_PointGeometry(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.PointGeometry;
        }
        private void set_121_Series_PointGeometry(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.PointGeometry = (global::LiveCharts.Uwp.PointGeometry)Value;
        }
        private object get_122_Series_ScalesXAt(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.ScalesXAt;
        }
        private void set_122_Series_ScalesXAt(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.ScalesXAt = (global::System.Int32)Value;
        }
        private object get_123_Series_ScalesYAt(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.ScalesYAt;
        }
        private void set_123_Series_ScalesYAt(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.ScalesYAt = (global::System.Int32)Value;
        }
        private object get_124_Series_LabelPoint(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.LabelPoint;
        }
        private void set_124_Series_LabelPoint(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.LabelPoint = (global::System.Func<global::LiveCharts.ChartPoint, global::System.String>)Value;
        }
        private object get_125_Series_Configuration(object instance)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            return that.Configuration;
        }
        private void set_125_Series_Configuration(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Series)instance;
            that.Configuration = (global::System.Object)Value;
        }
        private object get_126_Separator_Step(object instance)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            return that.Step;
        }
        private void set_126_Separator_Step(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            that.Step = (global::System.Double)Value;
        }
        private object get_127_Separator_Chart(object instance)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            return that.Chart;
        }
        private void set_127_Separator_Chart(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            that.Chart = (global::LiveCharts.Charts.ChartCore)Value;
        }
        private object get_128_Separator_Stroke(object instance)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            return that.Stroke;
        }
        private void set_128_Separator_Stroke(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            that.Stroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_129_Separator_StrokeThickness(object instance)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            return that.StrokeThickness;
        }
        private void set_129_Separator_StrokeThickness(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_130_Separator_StrokeDashArray(object instance)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            return that.StrokeDashArray;
        }
        private void set_130_Separator_StrokeDashArray(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            that.StrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_131_Separator_AxisOrientation(object instance)
        {
            var that = (global::LiveCharts.Uwp.Separator)instance;
            return that.AxisOrientation;
        }
        private object get_132_PieSlice_Radius(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.Radius;
        }
        private void set_132_PieSlice_Radius(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_133_PieSlice_PushOut(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.PushOut;
        }
        private void set_133_PieSlice_PushOut(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.PushOut = (global::System.Double)Value;
        }
        private object get_134_PieSlice_InnerRadius(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.InnerRadius;
        }
        private void set_134_PieSlice_InnerRadius(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.InnerRadius = (global::System.Double)Value;
        }
        private object get_135_PieSlice_WedgeAngle(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.WedgeAngle;
        }
        private void set_135_PieSlice_WedgeAngle(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.WedgeAngle = (global::System.Double)Value;
        }
        private object get_136_PieSlice_RotationAngle(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.RotationAngle;
        }
        private void set_136_PieSlice_RotationAngle(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.RotationAngle = (global::System.Double)Value;
        }
        private object get_137_PieSlice_XOffset(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.XOffset;
        }
        private void set_137_PieSlice_XOffset(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_138_PieSlice_YOffset(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.YOffset;
        }
        private void set_138_PieSlice_YOffset(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_139_PieSlice_Percentage(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.Percentage;
        }
        private object get_140_PieSlice_PieceValue(object instance)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            return that.PieceValue;
        }
        private void set_140_PieSlice_PieceValue(object instance, object Value)
        {
            var that = (global::LiveCharts.Uwp.Points.PieSlice)instance;
            that.PieceValue = (global::System.Double)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember xamlMember = null;
            global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "hacketonApp.View.Temperature.ChartValues":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ChartValues", "LiveCharts.ChartValues`1<hacketonApp.Model.Data>");
                xamlMember.Getter = get_0_Temperature_ChartValues;
                xamlMember.Setter = set_0_Temperature_ChartValues;
                break;
            case "hacketonApp.Model.Data.Temperature":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.Model.Data");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Temperature", "Double");
                xamlMember.Getter = get_1_Data_Temperature;
                xamlMember.Setter = set_1_Data_Temperature;
                break;
            case "hacketonApp.Model.Data.Windspeed":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.Model.Data");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Windspeed", "Double");
                xamlMember.Getter = get_2_Data_Windspeed;
                xamlMember.Setter = set_2_Data_Windspeed;
                break;
            case "hacketonApp.Model.Data.WindOrientation":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.Model.Data");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "WindOrientation", "Int32");
                xamlMember.Getter = get_3_Data_WindOrientation;
                xamlMember.Setter = set_3_Data_WindOrientation;
                break;
            case "hacketonApp.Model.Data.ParticleSize":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.Model.Data");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ParticleSize", "Double");
                xamlMember.Getter = get_4_Data_ParticleSize;
                xamlMember.Setter = set_4_Data_ParticleSize;
                break;
            case "hacketonApp.View.Temperature.DateTimeFormatter":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "DateTimeFormatter", "System.Func`2<Double, String>");
                xamlMember.Getter = get_5_Temperature_DateTimeFormatter;
                xamlMember.Setter = set_5_Temperature_DateTimeFormatter;
                break;
            case "hacketonApp.View.Temperature.AxisStep":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisStep", "Double");
                xamlMember.Getter = get_6_Temperature_AxisStep;
                xamlMember.Setter = set_6_Temperature_AxisStep;
                break;
            case "hacketonApp.View.Temperature.AxisMax":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisMax", "Double");
                xamlMember.Getter = get_7_Temperature_AxisMax;
                xamlMember.Setter = set_7_Temperature_AxisMax;
                break;
            case "hacketonApp.View.Temperature.AxisMin":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisMin", "Double");
                xamlMember.Getter = get_8_Temperature_AxisMin;
                xamlMember.Setter = set_8_Temperature_AxisMin;
                break;
            case "hacketonApp.View.Temperature.Timer":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Timer", "Windows.UI.Xaml.DispatcherTimer");
                xamlMember.Getter = get_9_Temperature_Timer;
                xamlMember.Setter = set_9_Temperature_Timer;
                break;
            case "hacketonApp.View.Temperature.IsDataInjectionRunning":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsDataInjectionRunning", "Boolean");
                xamlMember.Getter = get_10_Temperature_IsDataInjectionRunning;
                xamlMember.Setter = set_10_Temperature_IsDataInjectionRunning;
                break;
            case "hacketonApp.View.Temperature.R":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.View.Temperature");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "R", "System.Random");
                xamlMember.Getter = get_11_Temperature_R;
                xamlMember.Setter = set_11_Temperature_R;
                break;
            case "hacketonApp.MainPage.ChartValues":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ChartValues", "LiveCharts.ChartValues`1<hacketonApp.Model.Data>");
                xamlMember.Getter = get_12_MainPage_ChartValues;
                xamlMember.Setter = set_12_MainPage_ChartValues;
                break;
            case "hacketonApp.MainPage.DateTimeFormatter":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "DateTimeFormatter", "System.Func`2<Double, String>");
                xamlMember.Getter = get_13_MainPage_DateTimeFormatter;
                xamlMember.Setter = set_13_MainPage_DateTimeFormatter;
                break;
            case "hacketonApp.MainPage.AxisStep":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisStep", "Double");
                xamlMember.Getter = get_14_MainPage_AxisStep;
                xamlMember.Setter = set_14_MainPage_AxisStep;
                break;
            case "hacketonApp.MainPage.AxisMax":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisMax", "Double");
                xamlMember.Getter = get_15_MainPage_AxisMax;
                xamlMember.Setter = set_15_MainPage_AxisMax;
                break;
            case "hacketonApp.MainPage.AxisMin":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisMin", "Double");
                xamlMember.Getter = get_16_MainPage_AxisMin;
                xamlMember.Setter = set_16_MainPage_AxisMin;
                break;
            case "hacketonApp.MainPage.Timer":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Timer", "Windows.UI.Xaml.DispatcherTimer");
                xamlMember.Getter = get_17_MainPage_Timer;
                xamlMember.Setter = set_17_MainPage_Timer;
                break;
            case "hacketonApp.MainPage.IsDataInjectionRunning":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsDataInjectionRunning", "Boolean");
                xamlMember.Getter = get_18_MainPage_IsDataInjectionRunning;
                xamlMember.Setter = set_18_MainPage_IsDataInjectionRunning;
                break;
            case "hacketonApp.MainPage.R":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("hacketonApp.MainPage");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "R", "System.Random");
                xamlMember.Getter = get_19_MainPage_R;
                xamlMember.Setter = set_19_MainPage_R;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.Series":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Series", "LiveCharts.SeriesCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_Chart_Series;
                xamlMember.Setter = set_20_Chart_Series;
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.Model":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Model", "LiveCharts.SeriesAlgorithm");
                xamlMember.Getter = get_21_ISeriesView_Model;
                xamlMember.Setter = set_21_ISeriesView_Model;
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.Values":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Values", "LiveCharts.IChartValues");
                xamlMember.Getter = get_22_ISeriesView_Values;
                xamlMember.Setter = set_22_ISeriesView_Values;
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.DataLabels":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "DataLabels", "Boolean");
                xamlMember.Getter = get_23_ISeriesView_DataLabels;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.ScalesXAt":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScalesXAt", "Int32");
                xamlMember.Getter = get_24_ISeriesView_ScalesXAt;
                xamlMember.Setter = set_24_ISeriesView_ScalesXAt;
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.ScalesYAt":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScalesYAt", "Int32");
                xamlMember.Getter = get_25_ISeriesView_ScalesYAt;
                xamlMember.Setter = set_25_ISeriesView_ScalesYAt;
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.Configuration":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Configuration", "Object");
                xamlMember.Getter = get_26_ISeriesView_Configuration;
                xamlMember.Setter = set_26_ISeriesView_Configuration;
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.IsSeriesVisible":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsSeriesVisible", "Boolean");
                xamlMember.Getter = get_27_ISeriesView_IsSeriesVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.LabelPoint":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "LabelPoint", "System.Func`2<LiveCharts.ChartPoint, String>");
                xamlMember.Getter = get_28_ISeriesView_LabelPoint;
                xamlMember.Setter = set_28_ISeriesView_LabelPoint;
                break;
            case "LiveCharts.Definitions.Series.ISeriesView.ActualValues":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Series.ISeriesView");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ActualValues", "LiveCharts.IChartValues");
                xamlMember.Getter = get_29_ISeriesView_ActualValues;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.AxisX":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisX", "LiveCharts.Uwp.AxesCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_Chart_AxisX;
                xamlMember.Setter = set_30_Chart_AxisX;
                break;
            case "LiveCharts.Uwp.Axis.LabelFormatter":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "LabelFormatter", "System.Func`2<Double, String>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_Axis_LabelFormatter;
                xamlMember.Setter = set_31_Axis_LabelFormatter;
                break;
            case "LiveCharts.Uwp.Axis.MaxValue":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "MaxValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_Axis_MaxValue;
                xamlMember.Setter = set_32_Axis_MaxValue;
                break;
            case "LiveCharts.Uwp.Axis.MinValue":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "MinValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_Axis_MinValue;
                xamlMember.Setter = set_33_Axis_MinValue;
                break;
            case "LiveCharts.Uwp.Axis.Separator":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Separator", "LiveCharts.Definitions.Charts.ISeparatorView");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_Axis_Separator;
                xamlMember.Setter = set_34_Axis_Separator;
                break;
            case "LiveCharts.Uwp.Axis.Model":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Model", "LiveCharts.AxisCore");
                xamlMember.Getter = get_35_Axis_Model;
                xamlMember.Setter = set_35_Axis_Model;
                break;
            case "LiveCharts.Uwp.Axis.PreviousMaxValue":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "PreviousMaxValue", "Double");
                xamlMember.Getter = get_36_Axis_PreviousMaxValue;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Axis.PreviousMinValue":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "PreviousMinValue", "Double");
                xamlMember.Getter = get_37_Axis_PreviousMinValue;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Axis.Labels":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Labels", "System.Collections.Generic.IList`1<String>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_Axis_Labels;
                xamlMember.Setter = set_38_Axis_Labels;
                break;
            case "LiveCharts.Uwp.Axis.Sections":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Sections", "LiveCharts.Uwp.SectionsCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_Axis_Sections;
                xamlMember.Setter = set_39_Axis_Sections;
                break;
            case "LiveCharts.Uwp.AxisSection.Model":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Model", "LiveCharts.AxisSectionCore");
                xamlMember.Getter = get_40_AxisSection_Model;
                xamlMember.Setter = set_40_AxisSection_Model;
                break;
            case "LiveCharts.Uwp.AxisSection.Label":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_AxisSection_Label;
                xamlMember.Setter = set_41_AxisSection_Label;
                break;
            case "LiveCharts.Uwp.AxisSection.Value":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_AxisSection_Value;
                xamlMember.Setter = set_42_AxisSection_Value;
                break;
            case "LiveCharts.Uwp.AxisSection.SectionWidth":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "SectionWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_AxisSection_SectionWidth;
                xamlMember.Setter = set_43_AxisSection_SectionWidth;
                break;
            case "LiveCharts.Uwp.AxisSection.Draggable":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Draggable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_AxisSection_Draggable;
                xamlMember.Setter = set_44_AxisSection_Draggable;
                break;
            case "LiveCharts.Uwp.AxisSection.Stroke":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Stroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_AxisSection_Stroke;
                xamlMember.Setter = set_45_AxisSection_Stroke;
                break;
            case "LiveCharts.Uwp.AxisSection.Fill":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Fill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_AxisSection_Fill;
                xamlMember.Setter = set_46_AxisSection_Fill;
                break;
            case "LiveCharts.Uwp.AxisSection.StrokeThickness":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_AxisSection_StrokeThickness;
                xamlMember.Setter = set_47_AxisSection_StrokeThickness;
                break;
            case "LiveCharts.Uwp.AxisSection.StrokeDashArray":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.AxisSection");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "StrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_AxisSection_StrokeDashArray;
                xamlMember.Setter = set_48_AxisSection_StrokeDashArray;
                break;
            case "LiveCharts.Uwp.Axis.ShowLabels":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_Axis_ShowLabels;
                xamlMember.Setter = set_49_Axis_ShowLabels;
                break;
            case "LiveCharts.Uwp.Axis.MinRange":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "MinRange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_Axis_MinRange;
                xamlMember.Setter = set_50_Axis_MinRange;
                break;
            case "LiveCharts.Uwp.Axis.MaxRange":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "MaxRange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_Axis_MaxRange;
                xamlMember.Setter = set_51_Axis_MaxRange;
                break;
            case "LiveCharts.Uwp.Axis.Title":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_Axis_Title;
                xamlMember.Setter = set_52_Axis_Title;
                break;
            case "LiveCharts.Uwp.Axis.Position":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Position", "LiveCharts.AxisPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_Axis_Position;
                xamlMember.Setter = set_53_Axis_Position;
                break;
            case "LiveCharts.Uwp.Axis.IsMerged":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsMerged", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_Axis_IsMerged;
                xamlMember.Setter = set_54_Axis_IsMerged;
                break;
            case "LiveCharts.Uwp.Axis.BarUnit":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "BarUnit", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_Axis_BarUnit;
                xamlMember.Setter = set_55_Axis_BarUnit;
                break;
            case "LiveCharts.Uwp.Axis.DisableAnimations":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "DisableAnimations", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_Axis_DisableAnimations;
                xamlMember.Setter = set_56_Axis_DisableAnimations;
                break;
            case "LiveCharts.Uwp.Axis.FontFamily":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_Axis_FontFamily;
                xamlMember.Setter = set_57_Axis_FontFamily;
                break;
            case "LiveCharts.Uwp.Axis.FontSize":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_Axis_FontSize;
                xamlMember.Setter = set_58_Axis_FontSize;
                break;
            case "LiveCharts.Uwp.Axis.FontWeight":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_Axis_FontWeight;
                xamlMember.Setter = set_59_Axis_FontWeight;
                break;
            case "LiveCharts.Uwp.Axis.FontStyle":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_Axis_FontStyle;
                xamlMember.Setter = set_60_Axis_FontStyle;
                break;
            case "LiveCharts.Uwp.Axis.FontStretch":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontStretch", "Windows.UI.Text.FontStretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_Axis_FontStretch;
                xamlMember.Setter = set_61_Axis_FontStretch;
                break;
            case "LiveCharts.Uwp.Axis.Foreground":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_Axis_Foreground;
                xamlMember.Setter = set_62_Axis_Foreground;
                break;
            case "LiveCharts.Uwp.Axis.LabelsRotation":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "LabelsRotation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_Axis_LabelsRotation;
                xamlMember.Setter = set_63_Axis_LabelsRotation;
                break;
            case "LiveCharts.Uwp.Axis.IsEnabled":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_Axis_IsEnabled;
                xamlMember.Setter = set_64_Axis_IsEnabled;
                break;
            case "LiveCharts.Uwp.Axis.AxisOrientation":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Axis");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisOrientation", "LiveCharts.AxisOrientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_Axis_AxisOrientation;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.CartesianChart.VisualElements":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.CartesianChart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "VisualElements", "LiveCharts.VisualElementsCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_CartesianChart_VisualElements;
                xamlMember.Setter = set_66_CartesianChart_VisualElements;
                break;
            case "LiveCharts.Definitions.Charts.ICartesianVisualElement.X":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Charts.ICartesianVisualElement");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "X", "Double");
                xamlMember.Getter = get_67_ICartesianVisualElement_X;
                xamlMember.Setter = set_67_ICartesianVisualElement_X;
                break;
            case "LiveCharts.Definitions.Charts.ICartesianVisualElement.Y":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Charts.ICartesianVisualElement");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Y", "Double");
                xamlMember.Getter = get_68_ICartesianVisualElement_Y;
                xamlMember.Setter = set_68_ICartesianVisualElement_Y;
                break;
            case "LiveCharts.Definitions.Charts.ICartesianVisualElement.AxisX":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Charts.ICartesianVisualElement");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisX", "Int32");
                xamlMember.Getter = get_69_ICartesianVisualElement_AxisX;
                xamlMember.Setter = set_69_ICartesianVisualElement_AxisX;
                break;
            case "LiveCharts.Definitions.Charts.ICartesianVisualElement.AxisY":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Definitions.Charts.ICartesianVisualElement");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisY", "Int32");
                xamlMember.Getter = get_70_ICartesianVisualElement_AxisY;
                xamlMember.Setter = set_70_ICartesianVisualElement_AxisY;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.IsMocked":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsMocked", "Boolean");
                xamlMember.Getter = get_71_Chart_IsMocked;
                xamlMember.Setter = set_71_Chart_IsMocked;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.SeriesColors":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "SeriesColors", "LiveCharts.Uwp.ColorsCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_Chart_SeriesColors;
                xamlMember.Setter = set_72_Chart_SeriesColors;
                break;
            case "Windows.UI.Color.A":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_73_Color_A;
                xamlMember.Setter = set_73_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_74_Color_B;
                xamlMember.Setter = set_74_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_75_Color_G;
                xamlMember.Setter = set_75_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_76_Color_R;
                xamlMember.Setter = set_76_Color_R;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.AxisY":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisY", "LiveCharts.Uwp.AxesCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_Chart_AxisY;
                xamlMember.Setter = set_77_Chart_AxisY;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ChartLegend":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ChartLegend", "Windows.UI.Xaml.Controls.UserControl");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_Chart_ChartLegend;
                xamlMember.Setter = set_78_Chart_ChartLegend;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.Zoom":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Zoom", "LiveCharts.ZoomingOptions");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_Chart_Zoom;
                xamlMember.Setter = set_79_Chart_Zoom;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.LegendLocation":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "LegendLocation", "LiveCharts.LegendLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_Chart_LegendLocation;
                xamlMember.Setter = set_80_Chart_LegendLocation;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.AnimationsSpeed":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AnimationsSpeed", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_Chart_AnimationsSpeed;
                xamlMember.Setter = set_81_Chart_AnimationsSpeed;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.DisableAnimations":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "DisableAnimations", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_Chart_DisableAnimations;
                xamlMember.Setter = set_82_Chart_DisableAnimations;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.DataTooltip":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "DataTooltip", "Windows.UI.Xaml.Controls.UserControl");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_Chart_DataTooltip;
                xamlMember.Setter = set_83_Chart_DataTooltip;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.Hoverable":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Hoverable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_Chart_Hoverable;
                xamlMember.Setter = set_84_Chart_Hoverable;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ScrollMode":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScrollMode", "LiveCharts.ScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_Chart_ScrollMode;
                xamlMember.Setter = set_85_Chart_ScrollMode;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ScrollHorizontalFrom":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScrollHorizontalFrom", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_Chart_ScrollHorizontalFrom;
                xamlMember.Setter = set_86_Chart_ScrollHorizontalFrom;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ScrollHorizontalTo":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScrollHorizontalTo", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_Chart_ScrollHorizontalTo;
                xamlMember.Setter = set_87_Chart_ScrollHorizontalTo;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ScrollVerticalFrom":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScrollVerticalFrom", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_Chart_ScrollVerticalFrom;
                xamlMember.Setter = set_88_Chart_ScrollVerticalFrom;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ScrollVerticalTo":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScrollVerticalTo", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_Chart_ScrollVerticalTo;
                xamlMember.Setter = set_89_Chart_ScrollVerticalTo;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ScrollBarFill":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScrollBarFill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_Chart_ScrollBarFill;
                xamlMember.Setter = set_90_Chart_ScrollBarFill;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ZoomingSpeed":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ZoomingSpeed", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_Chart_ZoomingSpeed;
                xamlMember.Setter = set_91_Chart_ZoomingSpeed;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.UpdaterState":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "UpdaterState", "LiveCharts.UpdaterState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_Chart_UpdaterState;
                xamlMember.Setter = set_92_Chart_UpdaterState;
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.Model":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Model", "LiveCharts.Charts.ChartCore");
                xamlMember.Getter = get_93_Chart_Model;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.HasTooltip":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "HasTooltip", "Boolean");
                xamlMember.Getter = get_94_Chart_HasTooltip;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.HasDataClickEventAttached":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "HasDataClickEventAttached", "Boolean");
                xamlMember.Getter = get_95_Chart_HasDataClickEventAttached;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.IsControlLoaded":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsControlLoaded", "Boolean");
                xamlMember.Getter = get_96_Chart_IsControlLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.IsInDesignMode":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsInDesignMode", "Boolean");
                xamlMember.Getter = get_97_Chart_IsInDesignMode;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.ActualSeries":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ActualSeries", "System.Collections.Generic.IEnumerable`1<LiveCharts.Definitions.Series.ISeriesView>");
                xamlMember.Getter = get_98_Chart_ActualSeries;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Charts.Base.Chart.TooltipTimeout":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Charts.Base.Chart");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "TooltipTimeout", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_Chart_TooltipTimeout;
                xamlMember.Setter = set_99_Chart_TooltipTimeout;
                break;
            case "LiveCharts.Uwp.Series.Values":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Values", "LiveCharts.IChartValues");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_Series_Values;
                xamlMember.Setter = set_100_Series_Values;
                break;
            case "LiveCharts.Uwp.LineSeries.PointGeometrySize":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.LineSeries");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "PointGeometrySize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_LineSeries_PointGeometrySize;
                xamlMember.Setter = set_101_LineSeries_PointGeometrySize;
                break;
            case "LiveCharts.Uwp.Series.StrokeThickness":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_Series_StrokeThickness;
                xamlMember.Setter = set_102_Series_StrokeThickness;
                break;
            case "LiveCharts.Uwp.LineSeries.PointForeround":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.LineSeries");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "PointForeround", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_LineSeries_PointForeround;
                xamlMember.Setter = set_103_LineSeries_PointForeround;
                break;
            case "LiveCharts.Uwp.LineSeries.LineSmoothness":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.LineSeries");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "LineSmoothness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_LineSeries_LineSmoothness;
                xamlMember.Setter = set_104_LineSeries_LineSmoothness;
                break;
            case "LiveCharts.Uwp.LineSeries.AreaLimit":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.LineSeries");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AreaLimit", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_LineSeries_AreaLimit;
                xamlMember.Setter = set_105_LineSeries_AreaLimit;
                break;
            case "LiveCharts.Uwp.Series.Model":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Model", "LiveCharts.SeriesAlgorithm");
                xamlMember.Getter = get_106_Series_Model;
                xamlMember.Setter = set_106_Series_Model;
                break;
            case "LiveCharts.Uwp.Series.ActualValues":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ActualValues", "LiveCharts.IChartValues");
                xamlMember.Getter = get_107_Series_ActualValues;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Series.IsSeriesVisible":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "IsSeriesVisible", "Boolean");
                xamlMember.Getter = get_108_Series_IsSeriesVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Series.ChartPoints":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ChartPoints", "System.Collections.Generic.IEnumerable`1<LiveCharts.ChartPoint>");
                xamlMember.Getter = get_109_Series_ChartPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Series.Title":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_Series_Title;
                xamlMember.Setter = set_110_Series_Title;
                break;
            case "LiveCharts.Uwp.Series.Stroke":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Stroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_Series_Stroke;
                xamlMember.Setter = set_111_Series_Stroke;
                break;
            case "LiveCharts.Uwp.Series.Fill":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Fill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_Series_Fill;
                xamlMember.Setter = set_112_Series_Fill;
                break;
            case "LiveCharts.Uwp.Series.DataLabels":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "DataLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_Series_DataLabels;
                xamlMember.Setter = set_113_Series_DataLabels;
                break;
            case "LiveCharts.Uwp.Series.FontFamily":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_Series_FontFamily;
                xamlMember.Setter = set_114_Series_FontFamily;
                break;
            case "LiveCharts.Uwp.Series.FontSize":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_Series_FontSize;
                xamlMember.Setter = set_115_Series_FontSize;
                break;
            case "LiveCharts.Uwp.Series.FontWeight":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_Series_FontWeight;
                xamlMember.Setter = set_116_Series_FontWeight;
                break;
            case "LiveCharts.Uwp.Series.FontStyle":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_Series_FontStyle;
                xamlMember.Setter = set_117_Series_FontStyle;
                break;
            case "LiveCharts.Uwp.Series.FontStretch":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "FontStretch", "Windows.UI.Text.FontStretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_Series_FontStretch;
                xamlMember.Setter = set_118_Series_FontStretch;
                break;
            case "LiveCharts.Uwp.Series.Foreground":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_Series_Foreground;
                xamlMember.Setter = set_119_Series_Foreground;
                break;
            case "LiveCharts.Uwp.Series.StrokeDashArray":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "StrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_Series_StrokeDashArray;
                xamlMember.Setter = set_120_Series_StrokeDashArray;
                break;
            case "LiveCharts.Uwp.Series.PointGeometry":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "PointGeometry", "LiveCharts.Uwp.PointGeometry");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_Series_PointGeometry;
                xamlMember.Setter = set_121_Series_PointGeometry;
                break;
            case "LiveCharts.Uwp.Series.ScalesXAt":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScalesXAt", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_Series_ScalesXAt;
                xamlMember.Setter = set_122_Series_ScalesXAt;
                break;
            case "LiveCharts.Uwp.Series.ScalesYAt":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "ScalesYAt", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_Series_ScalesYAt;
                xamlMember.Setter = set_123_Series_ScalesYAt;
                break;
            case "LiveCharts.Uwp.Series.LabelPoint":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "LabelPoint", "System.Func`2<LiveCharts.ChartPoint, String>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_Series_LabelPoint;
                xamlMember.Setter = set_124_Series_LabelPoint;
                break;
            case "LiveCharts.Uwp.Series.Configuration":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Series");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Configuration", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_Series_Configuration;
                xamlMember.Setter = set_125_Series_Configuration;
                break;
            case "LiveCharts.Uwp.Separator.Step":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Separator");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Step", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_Separator_Step;
                xamlMember.Setter = set_126_Separator_Step;
                break;
            case "LiveCharts.Uwp.Separator.Chart":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Separator");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Chart", "LiveCharts.Charts.ChartCore");
                xamlMember.Getter = get_127_Separator_Chart;
                xamlMember.Setter = set_127_Separator_Chart;
                break;
            case "LiveCharts.Uwp.Separator.Stroke":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Separator");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Stroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_Separator_Stroke;
                xamlMember.Setter = set_128_Separator_Stroke;
                break;
            case "LiveCharts.Uwp.Separator.StrokeThickness":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Separator");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_Separator_StrokeThickness;
                xamlMember.Setter = set_129_Separator_StrokeThickness;
                break;
            case "LiveCharts.Uwp.Separator.StrokeDashArray":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Separator");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "StrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_Separator_StrokeDashArray;
                xamlMember.Setter = set_130_Separator_StrokeDashArray;
                break;
            case "LiveCharts.Uwp.Separator.AxisOrientation":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Separator");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "AxisOrientation", "LiveCharts.AxisOrientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_Separator_AxisOrientation;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Points.PieSlice.Radius":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_PieSlice_Radius;
                xamlMember.Setter = set_132_PieSlice_Radius;
                break;
            case "LiveCharts.Uwp.Points.PieSlice.PushOut":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "PushOut", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_PieSlice_PushOut;
                xamlMember.Setter = set_133_PieSlice_PushOut;
                break;
            case "LiveCharts.Uwp.Points.PieSlice.InnerRadius":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "InnerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_PieSlice_InnerRadius;
                xamlMember.Setter = set_134_PieSlice_InnerRadius;
                break;
            case "LiveCharts.Uwp.Points.PieSlice.WedgeAngle":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "WedgeAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_PieSlice_WedgeAngle;
                xamlMember.Setter = set_135_PieSlice_WedgeAngle;
                break;
            case "LiveCharts.Uwp.Points.PieSlice.RotationAngle":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "RotationAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_PieSlice_RotationAngle;
                xamlMember.Setter = set_136_PieSlice_RotationAngle;
                break;
            case "LiveCharts.Uwp.Points.PieSlice.XOffset":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_PieSlice_XOffset;
                xamlMember.Setter = set_137_PieSlice_XOffset;
                break;
            case "LiveCharts.Uwp.Points.PieSlice.YOffset":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_PieSlice_YOffset;
                xamlMember.Setter = set_138_PieSlice_YOffset;
                break;
            case "LiveCharts.Uwp.Points.PieSlice.Percentage":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "Percentage", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_PieSlice_Percentage;
                xamlMember.SetIsReadOnly();
                break;
            case "LiveCharts.Uwp.Points.PieSlice.PieceValue":
                userType = (global::hacketonApp.hacketonApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LiveCharts.Uwp.Points.PieSlice");
                xamlMember = new global::hacketonApp.hacketonApp_XamlTypeInfo.XamlMember(this, "PieceValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_PieSlice_PieceValue;
                xamlMember.Setter = set_140_PieSlice_PieceValue;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::hacketonApp.hacketonApp_XamlTypeInfo.XamlSystemBaseType
    {
        global::hacketonApp.hacketonApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::hacketonApp.hacketonApp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::hacketonApp.hacketonApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::hacketonApp.hacketonApp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

